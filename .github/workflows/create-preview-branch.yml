---
name: Create Preview Branch

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: 'Source branch to create preview from'
        required: true
        default: 'main'
        type: string

concurrency:
  group: create-preview-${{ github.event.inputs.source_branch }}
  cancel-in-progress: true

permissions:
  contents: write  # Required to checkout, create branches, and push
  actions: read    # Required to run the workflow

jobs:
  create-preview:
    runs-on: ubuntu-latest
    env:
      SOURCE_BRANCH: ${{ github.event.inputs.source_branch }}
      GITHUB_SHA: ${{ github.sha }}
    steps:
      - name: Validate and sanitize input
        id: validate
        run: |
          set -euo pipefail
          
          echo "[INFO] Validating source branch input"
          
          # Validate source branch contains only safe characters and isn't too long
          if [[ ! "$SOURCE_BRANCH" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
            echo "[ERROR] Source branch name contains invalid characters. Only alphanumeric, slash, underscore, and hyphen are allowed."
            exit 1
          fi
          
          if [[ ${#SOURCE_BRANCH} -gt 100 ]]; then
            echo "[ERROR] Source branch name is too long (max 100 characters)"
            exit 1
          fi
          
          # Defensive check even though input is required
          if [[ ${#SOURCE_BRANCH} -lt 1 ]]; then
            echo "[ERROR] Source branch name cannot be empty"
            exit 1
          fi
          
          # Sanitize for logging (first 20 chars max)
          SAFE_LOG_BRANCH=$(echo "$SOURCE_BRANCH" | cut -c1-20)
          echo "safe_branch_log=$SAFE_LOG_BRANCH" >> $GITHUB_OUTPUT
          echo "[SUCCESS] Input validation passed for branch: $SAFE_LOG_BRANCH"

      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.source_branch }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: make install

      - name: Build documentation
        run: make build

      - name: Generate secure preview branch name
        id: branch-name
        run: |
          set -euo pipefail
          
          echo "[INFO] Generating collision-resistant preview branch name"
          
          # Function to generate preview branch name
          generate_preview_branch() {
            local safe_prefix timestamp short_sha
            safe_prefix=$(echo "$SOURCE_BRANCH" | tr -cd '[:alnum:]' | cut -c1-6)
            timestamp=$(date +%s)
            short_sha="${GITHUB_SHA:0:7}"
            echo "preview-${safe_prefix}-${timestamp}-${short_sha}"
          }
          
          PREVIEW_BRANCH=$(generate_preview_branch)
          echo "branch_name=$PREVIEW_BRANCH" >> $GITHUB_OUTPUT
          echo "[INFO] Preview branch will be: $PREVIEW_BRANCH"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if preview branch already exists
        run: |
          set -euo pipefail
          
          PREVIEW_BRANCH="${{ steps.branch-name.outputs.branch_name }}"
          echo "[INFO] Checking if preview branch already exists: $PREVIEW_BRANCH"
          
          # Check if the branch exists remotely
          if git ls-remote --exit-code --heads origin "$PREVIEW_BRANCH" >/dev/null 2>&1; then
            echo "[ERROR] Preview branch $PREVIEW_BRANCH already exists. This should be extremely rare."
            echo "[INFO] Please retry the workflow to generate a new branch name."
            exit 1
          fi
          
          echo "[SUCCESS] Preview branch name is unique"

      - name: Create and push preview branch
        run: |
          set -euo pipefail
          
          PREVIEW_BRANCH="${{ steps.branch-name.outputs.branch_name }}"
          SAFE_BRANCH_LOG="${{ steps.validate.outputs.safe_branch_log }}"
          
          echo "[INFO] Creating preview branch: $PREVIEW_BRANCH"
          
          # Create new branch from current state
          git checkout -b "$PREVIEW_BRANCH"
          
          # Add build artifacts
          echo "[INFO] Adding build artifacts to preview branch"
          git add build/
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "[WARN] No build artifacts to commit"
          else
            echo "[INFO] Committing build artifacts"
            git commit -m "Add build artifacts for preview deployment

            Source branch: $SAFE_BRANCH_LOG
            Generated from commit: $GITHUB_SHA
            Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            This branch contains the built documentation for preview deployment.
            Do not merge this branch to main."
          fi
          
          # Push the preview branch
          echo "[INFO] Pushing preview branch to origin"
          git push origin "$PREVIEW_BRANCH"
          echo "[SUCCESS] Successfully pushed preview branch"

      - name: Save preview branch info
        run: |
          set -euo pipefail
          
          PREVIEW_BRANCH="${{ steps.branch-name.outputs.branch_name }}"
          SAFE_BRANCH_LOG="${{ steps.validate.outputs.safe_branch_log }}"
          
          echo "[SUCCESS] Preview branch created successfully!"
          echo "[INFO] Branch name: $PREVIEW_BRANCH"
          echo "[INFO] Source branch: $SAFE_BRANCH_LOG"
          echo "[INFO] Source commit: $GITHUB_SHA"
          echo "[INFO] Created at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "[INFO] The preview branch is now ready for Mintlify deployment."
          echo ""
          echo "[INFO] ðŸ”— Branch URL: https://github.com/${{ github.repository }}/tree/$PREVIEW_BRANCH"
